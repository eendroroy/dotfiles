#!/usr/bin/env bash

# Copyright (C) 2025 Indrajit Roy <eendroroy@gmail.com>
#
# SPDX-License-Identifier: AGPL-3.0-or-later
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.

__CURRENT_DIR=$(pwd)
__SUCCESS_SYMBOL=" ░"
__ERROR_SYMBOL=" ░"
__PRIMARY_SYMBOL=" ━"

__handle_stdout() {
  while IFS= read -r line; do
    printf "\e[38;5;2m%s\e[0m  %s\n" "${__SUCCESS_SYMBOL}" "${line}"
  done
}

__handle_stderr() {
  while IFS= read -r line; do
    printf "\e[38;5;1m%s\e[0m  %s\n" "${__ERROR_SYMBOL}" "${line}" >&2
  done
}

__list() {
  find . -name ".git" -type d -print0 | while IFS= read -r -d '' dir; do
    repo_dir=$(dirname "$dir")
    (
      if ! cd "$repo_dir" 2>/dev/null; then
        echo -e "\e[38;5;1m${__PRIMARY_SYMBOL}\e[0m  \e[38;5;9mFailed to enter: ${repo_dir}\e[0m" 1>&2
        exit 1
      fi

      printf "\e[38;5;2m${__PRIMARY_SYMBOL}\e[0m \e[32m%s\e[m \e[33m%s\e[m \e[35m%s\e[m \e[33m%s\e[m \e[96m%s\e[m\n" \
        "$(git branch --show-current)" \
        "$(git log -1 --format="%h" --abbrev=8)" \
        "${PWD/"${__CURRENT_DIR}"/.}" \
        "$(git log -1 --format="%cr")" \
        "$(git log -1 --format="%ae")"
    )
  done
}

__help() {
  echo
  echo -e "\e[1;37mGitter\e[0m - Run git or arbitrary command in multiple git repositories"
  echo
  echo -e "\e[1;37mUsage:\e[0m"
  echo -e "  \e[32mgitter\e[0m [\e[36m--include <dir>\e[0m ...] [\e[36m--exclude <dir>\e[0m ...] [\e[36m--git\e[0m|\e[36m--exe\e[0m] [\e[33margs...\e[0m]"
  echo
  echo -e "\e[1;37mOptions:\e[0m"
  echo -e "  \e[36m--include, -i <dir>\e[0m Include directory (can be used multiple times; default: .)"
  echo -e "  \e[36m--exclude, -e <dir>\e[0m Exclude directory (can be used multiple times, supports globs, ex: 'node_modules')"
  echo -e "  \e[36m--git, -g\e[0m           Use git (default)"
  echo -e "  \e[36m--exe, -x\e[0m           Use exec (run arbitrary command)"
  echo -e "  \e[33margs...\e[0m             Arguments passed to the command"
  echo
  echo -e "\e[1;37mCommands:\e[0m"
  echo -e "  \e[32mlist\e[0m                List all git repos"
  echo -e "  \e[32mhelp\e[0m                Show this help menu"
  echo
}

__accept_no_arg() {
  if [[ -n $1 ]]; then
    echo
    echo -e "\e[1;31mUnknown argument:\e[0m $1"
    echo
    __help
    exit 1
  fi
}

# Argument defaults
include_dirs=()
exclude_dirs=()
cmd_type="git"
args=()

if [[ $# -eq 0 ]]; then
  __help
  exit 1
fi

# Parse arguments
while [[ $# -gt 0 ]]; do
  case "$1" in
    help)
      shift
      __accept_no_arg "$1"
      __help
      exit 0
      ;;
    list)
      shift
      __accept_no_arg "$1"
      __list
      exit 0
      ;;
    --include|-i)
      shift
      if [[ -z "$1" || "$1" == -* ]]; then
        echo
        echo -e "\e[1;31mMissing or invalid argument for:\e[0m \e[36m--include\e[0m"
        echo
        __help
        exit 1
      fi
      include_dirs+=("$1")
      shift
      ;;
    --exclude|-e)
      shift
      if [[ -z "$1" || "$1" == -* ]]; then
        echo
        echo -e "\e[1;31mMissing or invalid argument for:\e[0m \e[36m--exclude\e[0m"
        echo
        __help
        exit 1
      fi
      exclude_dirs+=("$1")
      shift
      ;;
    --git|-g)
      cmd_type="git"
      shift
      ;;
    --exe|-x)
      cmd_type="exec"
      shift
      ;;
    *)
      args+=("$1")
      shift
      ;;
  esac
done

if [[ ${#include_dirs[@]} -eq 0 ]]; then
  include_dirs=(".")
fi

for find_dir in "${include_dirs[@]}"; do
  find "$find_dir" -name ".git" -type d -print0 | while IFS= read -r -d '' dir; do
    repo_dir=$(dirname "$dir")
    skip=0
    for ex in "${exclude_dirs[@]}"; do
      repo_clean=${repo_dir#./}
      repo_clean=${repo_clean%/}
      IFS='/' read -ra dir_parts <<< "$repo_clean"
      for part in "${dir_parts[@]}"; do
        # shellcheck disable=SC2254
        case "$part" in
          $ex)
            skip=1
            break
            ;;
        esac
      done
    done
    [[ $skip -eq 1 ]] && continue
    echo -e "\e[38;5;2m${__PRIMARY_SYMBOL} \e[1;38;5;2m(${cmd_type} ${args[*]})\e[m \e[90min\e[m \e[35m$repo_dir\e[m"
    (
      if ! cd "$repo_dir" 2>/dev/null; then
        echo -e "\e[38;5;1m${__PRIMARY_SYMBOL}\e[0m  \e[38;5;9mFailed to enter: ${repo_dir}\e[0m" 1>&2
        exit 1
      fi
      "$cmd_type" "${args[@]}" 1> >(__handle_stdout) 2> >(__handle_stderr)
    )
  done
done